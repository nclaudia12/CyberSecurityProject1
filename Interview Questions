Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they actually run. This decoupling allows container-based 
applications to be deployed easily and consistently, regardless of whether the target environment is a private data center, the public cloud, or even a developer’s personal 
laptop.   Container consists of an entire runtime environment: an application, plus all its dependencies, libraries and other binaries, and configuration files needed to run 
it, bundled into one package. By containerizing the application platform and its dependencies, differences in OS distributions and underlying infrastructure are abstracted
away. Containerization provides a clean separation of concerns, as developers focus on their application logic and dependencies, while IT operations teams can focus on 
deployment and management without bothering with application details such as specific software versions and configurations specific to the app.Containers contain less memory 
than VMs and can handle more applications. Containers virtualize the operating systems instead of hardware like VMs.

In Project 1, we configured our VMs to be able to run containers by using docker. Docker is a software that offers a set of platform-as-a-service products for developing 
and deploying applications by packaging software in containers. We used a list of commands such as “docker ps” which lists the running containers. We verified that the 
container was running correctly by using command ‘docker container list -a, and if it wasn't running we would proceed by using command ‘docker start (container name)’ 
followed by ‘docker attach (container name)’.

Although containers have a lot of advantages there also are disadvantages with the usage of containers.  Containers add more cost than you expect. Perhaps this is because 
good container developers are hard to find, but using containers for new applications adds about 30 percent to the cost of development versus not using containers. The 
advantages of containers typically make the extra cost worthwhile, but not always. Containers consume resources more efficiently than virtual machines. But containers are 
still subject to performance overhead due to overlay networking, interfacing between containers and the host system and so on. If you want 100 percent bare-metal performance, 
you need to use bare metal, not containers.
